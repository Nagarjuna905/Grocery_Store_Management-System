-- SQL Project on Grocery Store Management

-- Creating Database
CREATE DATABASE IF NOT EXISTS GroceryStoreManagement;

-- Using database
USE GroceryStoreManagement;

-- Creating Tables
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
)AUTO_INCREMENT = 1;

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    cat_name VARCHAR(255)
)AUTO_INCREMENT = 1;

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT AUTO_INCREMENT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
)AUTO_INCREMENT = 1;

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT AUTO_INCREMENT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
)AUTO_INCREMENT = 1;

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT AUTO_INCREMENT  PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
)AUTO_INCREMENT = 1;

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT AUTO_INCREMENT  PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
)AUTO_INCREMENT = 1;

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
)AUTO_INCREMENT = 1;

-- Directly imported data from the files

-- Retrives the Tables data
SELECT * FROM supplier;
SELECT * FROM categories;
SELECT * FROM employees;
SELECT * FROM customers;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM order_details;


-- 1️. Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.

-- * How many unique customers have placed orders?
SELECT COUNT(DISTINCT cust_id) AS Count_cust
FROM orders;


-- * Which customers have placed the highest number of orders?
SELECT c.cust_id,c.cust_name,COUNT(o.ord_id) AS total_orders
FROM customers c
JOIN orders o 
ON c.cust_id = o.cust_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_orders DESC;


-- * What is the total and average purchase value per customer?
SELECT o.ord_id,c.cust_name,SUM(od.total_price) AS Total_price,AVG(total_price) AS Avg_price
FROM customers c
JOIN orders o
ON c.cust_id = o.cust_id
JOIN order_details od
ON o.ord_id = od.ord_id
GROUP BY od.ord_id
ORDER BY Total_price DESC;


-- * Who are the top 5 customers by total purchase amount?
SELECT o.ord_id,c.cust_name,SUM(od.total_price) AS Total_price
FROM customers c
JOIN orders o
ON c.cust_id = o.cust_id
JOIN order_details od
ON o.ord_id = od.ord_id
GROUP BY od.ord_id
ORDER BY Total_price DESC LIMIT 5;


-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.

-- * How many products exist in each category?
SELECT c.cat_id,c.cat_name,COUNT(p.prod_name) AS Total_products
FROM categories c
LEFT JOIN products p
ON p.cat_id = c.cat_id
GROUP BY c.cat_id,c.cat_name
ORDER BY Total_products DESC;


-- * What is the average price of products by category?
SELECT c.cat_id,c.cat_name,AVG(p.price) AS avg_product_price
FROM categories c
JOIN products p 
ON c.cat_id = p.cat_id
GROUP BY c.cat_id, c.cat_name
ORDER BY avg_product_price DESC;


-- * Which products have the highest total sales volume (by quantity)?
SELECT p.prod_id,p.prod_name,SUM(od.quantity) AS Total_sales
FROM products p
JOIN order_details od
ON p.prod_id = od.prod_id
GROUP BY od.prod_id
ORDER BY Total_sales DESC;


-- * What is the total revenue generated by each product?
SELECT p.prod_id,p.prod_name,SUM(od.total_price) AS total_revenue
FROM products p
JOIN order_details od 
ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY total_revenue DESC;


-- * How do product sales vary by category and supplier?
SELECT c.cat_name,s.sup_name,SUM(od.quantity) AS total_quantity_sold,
	SUM(od.total_price) AS total_revenue
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
JOIN categories c ON p.cat_id = c.cat_id
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY c.cat_name, s.sup_name
ORDER BY c.cat_name, total_revenue DESC;


-- 3. Sales and Order Trends
-- Analyze business performance through orders and revenue over time.

-- * How many orders have been placed in total?
SELECT COUNT(cust_id) AS Total_orders
FROM orders;


-- * What is the average value per order?
SELECT ROUND(SUM(od.total_price) / COUNT(DISTINCT o.ord_id), 2) AS avg_order_value
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id;


-- * On which dates were the most orders placed?
SELECT order_date,COUNT(ord_id) AS total_orders
FROM orders
GROUP BY order_date
ORDER BY total_orders DESC;


-- Adding new Date column And Changes doing in orders date formet
ALTER TABLE orders ADD COLUMN order_date_fixed DATE;

-- Disable Safe Update Temporarily
-- Run this before your UPDATE command:
SET SQL_SAFE_UPDATES = 0;

-- Updating String date to Date formet
UPDATE orders 
SET order_date_fixed = STR_TO_DATE(order_date, '%m/%d/%Y');

-- Then, if you want, turn it back on afterward
SET SQL_SAFE_UPDATES = 1;


-- * What are the monthly trends in order volume and revenue?
SELECT DATE_FORMAT(order_date_fixed, '%M') AS month_name,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY DATE_FORMAT(order_date_fixed, '%M'), MONTH(order_date_fixed)
ORDER BY MONTH(order_date_fixed);


-- * How do order patterns vary across weekdays and weekends?
SELECT DAYNAME(order_date_fixed) AS day_name,
    CASE 
        WHEN DAYOFWEEK(order_date_fixed) IN (1, 7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS day_type,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY day_name, day_type
ORDER BY day_name;


-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.

-- * How many suppliers are there in the database?
SELECT COUNT(sup_id) AS total_suppliers
FROM supplier;


--  Which supplier provides the most products?
SELECT s.sup_id,s.sup_name,COUNT(p.prod_name) AS Total_products
FROM supplier s
JOIN products p
ON s.sup_id = p.sup_id
GROUP BY s.sup_id,s.sup_name
ORDER BY Total_products DESC;


--  What is the average price of products from each supplier?
SELECT s.sup_id,s.sup_name,p.prod_name,ROUND(AVG(p.price), 2) AS Average_product_price
FROM supplier s
JOIN products p
ON s.sup_id = p.sup_id
GROUP BY s.sup_id,p.prod_name
ORDER BY Average_price DESC;


-- * Which suppliers contribute the most to total product sales (by revenue)?
SELECT s.sup_name,SUM(od.total_price) AS total_revenue
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY s.sup_name
ORDER BY total_revenue DESC;


-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.

-- * How many employees have processed orders?
SELECT COUNT(DISTINCT emp_id) AS Active_employees
FROM orders;


-- * Which employees have handled the most orders?
SELECT o.emp_id,e.emp_name,COUNT(o.ord_id) AS Total_orders_handled
FROM employees e
JOIN orders o
ON e.emp_id = o.emp_id
GROUP BY o.emp_id
ORDER BY Total_orders_handled DESC;


--  What is the total sales value processed by each employee?
SELECT o.emp_id,e.emp_name,SUM(od.total_price) AS Total_sales_value
FROM employees e
JOIN orders o
ON e.emp_id = o.emp_id
JOIN order_details od
ON o.ord_id = od.ord_id
GROUP BY e.emp_id,od.ord_id
ORDER BY Total_sales_value DESC;


-- * What is the average order value handled per employee?
SELECT o.emp_id,e.emp_name,
	ROUND(SUM(od.total_price) / COUNT(DISTINCT o.ord_id), 2) AS Avg_order_value
FROM employees e
JOIN orders o
ON e.emp_id = o.emp_id
JOIN order_details od
ON o.ord_id = od.ord_id
GROUP BY e.emp_id,od.ord_id
ORDER BY Avg_order_value DESC;


-- ** Full Employee Performance Summary 
SELECT e.emp_name,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_sales_value,
    ROUND(SUM(od.total_price) / COUNT(DISTINCT o.ord_id), 2) AS avg_order_value
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_name
ORDER BY total_sales_value DESC;


-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.

-- * What is the relationship between quantity ordered and total price?
/*Answer - When quantity ordered increases, total price also increases 
— showing a direct and positive relationship between the two.*/
SELECT quantity,ROUND(AVG(total_price), 2) AS avg_total_price,
    ROUND(SUM(total_price), 2) AS total_revenue,
    COUNT(*) AS number_of_orders
FROM order_details
GROUP BY quantity
ORDER BY quantity;


-- * What is the average quantity ordered per product?
SELECT p.prod_id,p.prod_name,ROUND(AVG(od.quantity),0) AS Avg_ordered
FROM order_details od
JOIN products p
ON od.prod_id = p.prod_id
GROUP BY p.prod_name,od.prod_id
ORDER BY Avg_ordered DESC;

-- * How does the unit price vary across products and orders?
SELECT p.prod_name,ROUND(AVG(od.each_price), 2) AS avg_unit_price,   
    ROUND(MIN(od.each_price), 2) AS min_unit_price,   
    ROUND(MAX(od.each_price), 2) AS max_unit_price,   
    COUNT(DISTINCT od.ord_id) AS total_orders         
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY p.prod_name
ORDER BY avg_unit_price DESC;

